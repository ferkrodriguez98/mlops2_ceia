# Generated manually because grpcio-tools is unavailable in this environment.
# Provides the same API surface expected from grpc_tools generated code.
# Generated manually because grpcio-tools is unavailable in the execution environment.
# This file provides the same API surface that would be generated by
# `grpc_tools.protoc` for the service definitions declared in
# `prediction.proto`.

import grpc

import grpc_service.prediction_pb2 as prediction__pb2


class PredictionServiceStub(object):
    """Stub client used to invoke RPCs on the PredictionService."""

    def __init__(self, channel: grpc.Channel):
        """Constructor.

        Args:
            channel: A grpc.Channel through which calls are made.
        """
        self.Predict = channel.unary_unary(
            "/prediction.PredictionService/Predict",
            request_serializer=prediction__pb2.PredictRequest.SerializeToString,
            response_deserializer=prediction__pb2.PredictResponse.FromString,
        )
        self.PredictStream = channel.stream_stream(
            "/prediction.PredictionService/PredictStream",
            request_serializer=prediction__pb2.StreamPredictRequest.SerializeToString,
            response_deserializer=prediction__pb2.StreamPredictResponse.FromString,
        )


class PredictionServiceServicer(object):
    """Base class for server-side implementations of PredictionService."""

    def Predict(self, request, context):  # pragma: no cover - interface method
        raise NotImplementedError("Method not implemented!")

    def PredictStream(self, request_iterator, context):  # pragma: no cover - interface method
        raise NotImplementedError("Method not implemented!")


def add_PredictionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "Predict": grpc.unary_unary_rpc_method_handler(
            servicer.Predict,
            request_deserializer=prediction__pb2.PredictRequest.FromString,
            response_serializer=prediction__pb2.PredictResponse.SerializeToString,
        ),
        "PredictStream": grpc.stream_stream_rpc_method_handler(
            servicer.PredictStream,
            request_deserializer=prediction__pb2.StreamPredictRequest.FromString,
            response_serializer=prediction__pb2.StreamPredictResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "prediction.PredictionService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


class PredictionService(object):
    """Experimental API that matches the asynchronous helpers generated by protoc."""

    @staticmethod
    def Predict(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/prediction.PredictionService/Predict",
            prediction__pb2.PredictRequest.SerializeToString,
            prediction__pb2.PredictResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def PredictStream(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/prediction.PredictionService/PredictStream",
            prediction__pb2.StreamPredictRequest.SerializeToString,
            prediction__pb2.StreamPredictResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
